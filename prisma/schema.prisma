generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  password              String
  phone                 String?
  country               String?
  role                  UserRole                @default(USER)
  points                Int                     @default(0)
  balance               Float                   @default(0)
  currency              String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  emailVerified         DateTime?
  image                 String?
  resetToken            String?                 @unique
  resetTokenExpiry      DateTime?
  affiliateCode         String?                 @unique
  referralCount         Int                     @default(0)
  referralEarnings      Int                     @default(0)
  referredBy            String?
  regionId              String?
  supabaseId            String?                 @unique
  Account               Account[]
  affiliateTransactions AffiliateTransaction[]
  FraudAlert            FraudAlert[]
  GameHistory           GameHistory[]
  games                 Game[]
  notifications         Notification[]
  payments              Payment[]
  PendingTransaction    PendingTransaction[]
  Session               Session[]
  TournamentParticipant TournamentParticipant[]
  transactions          Transaction[]
  UserPrize             UserPrize[]
  referrer              User?                   @relation("UserReferrals", fields: [referredBy], references: [affiliateCode])
  referrals             User[]                  @relation("UserReferrals")
  region                RegionModel?            @relation(fields: [regionId], references: [id])

  @@map("users")
}

model RegionModel {
  id            String    @id @default(cuid())
  name          String    @unique
  currency      String    @default("EUR")
  pointsPerPlay Int      @default(2)
  costPerPoint  Float    @default(1.0)
  countries     String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  users         User[]
  payments      Payment[]
  transactions  Transaction[]
  pendingTransactions PendingTransaction[]
  prizes        Prize[]

  @@map("regions")
}

model Game {
  id          String        @id @default(cuid())
  userId      String
  type        GameType
  status      GameStatus    @default(PENDING)
  points      Int
  won         Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  prizes      GamePrize[]
  history     GameHistory[]

  @@map("games")
}

model GameHistory {
  id        String   @id @default(cuid())
  gameId    String
  userId    String
  prizeId   String?
  status    String
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  prize     Prize?   @relation(fields: [prizeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("game_history")
}

model GamePrize {
  id        String   @id @default(cuid())
  gameId    String
  prizeId   String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id])
  prize     Prize    @relation(fields: [prizeId], references: [id])

  @@map("game_prizes")
}

model Prize {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  value       Float    @default(0)
  pointValue  Int      @default(0)
  category    String   @default("default")
  isActive    Boolean  @default(true)
  stock       Int      @default(0)
  regionId    String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  region      RegionModel? @relation(fields: [regionId], references: [id])  
  UserPrize   UserPrize[]
  Tournament  Tournament[]
  GamePrize   GamePrize[]
  GameHistory GameHistory[]

  @@map("prizes")
}

model Tournament {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      TournamentStatus @default(UPCOMING)
  maxPlayers  Int       @default(100)
  entryFee    Int       @default(0)
  prizeId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  participants TournamentParticipant[]
  prize       Prize     @relation(fields: [prizeId], references: [id])

  @@map("tournaments")
}

model TournamentParticipant {
  id           String     @id
  tournamentId String
  userId       String
  score        Int        @default(0)
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}

model UserPrize {
  id        String   @id
  userId    String
  prizeId   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prize     Prize    @relation(fields: [prizeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_prizes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Payment {
  id            String          @id @default(cuid())
  userId        String
  amount        Float
  currency      String
  status        PaymentStatus   @default(PENDING)
  type          String
  provider      PaymentProvider
  points        Int            @default(0)
  paypalOrderId String?         @unique
  regionId      String         // Déjà obligatoire
  reference     String?
  transactionId String?
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  processedAt   DateTime?
  user          User            @relation(fields: [userId], references: [id])
  region        RegionModel     @relation(fields: [regionId], references: [id])

  @@map("payments")
}

model PendingTransaction {
  id        String      @id @default(cuid())
  userId    String
  orderId   String      @unique
  amount    Float
  currency  String
  points    Int
  regionId  String
  status    String      @default("PENDING")
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  region    RegionModel @relation(fields: [regionId], references: [id])

  @@map("pending_transactions")
}

model Transaction {
  id          String       @id @default(cuid())
  userId      String
  type        String
  amount      Float
  points      Int?
  status      String
  regionId    String?
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  region      RegionModel? @relation(fields: [regionId], references: [id])

  @@map("transactions")
}

model AffiliateTransaction {
  id        String   @id @default(cuid())
  userId    String
  points    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("affiliate_transactions")
}

model FraudAlert {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("fraud_alerts")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Log {
  id        String      @id @default(cuid())
  level     LogLevel    @default(INFO)
  category  LogCategory
  message   String
  metadata  Json?
  createdAt DateTime    @default(now())

  @@index([category])
  @@index([createdAt])
  @@index([level])
  @@map("logs")
}

model Settings {
  id               String   @id @default(cuid())
  cardsPerGame     Int      @default(2)
  costPerCard      Int      @default(1)
  blackAfricaRate  Float    @default(150)
  whiteAfricaRate  Float    @default(0.5)
  europeRate       Float    @default(0.85)
  asiaRate         Float    @default(0.75)
  americaRate      Float    @default(1)
  defaultPoints    Int      @default(10)
  minPointsPerGame Int      @default(1)
  maxPointsPerGame Int      @default(100)
  referralPoints   Int      @default(5)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("settings")
}

enum PaymentProvider {
  PAYPAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum Category {
  FOOD
  CLOTHING
  SUPER
}

enum Region {
  BLACK_AFRICA
  WHITE_AFRICA
  EUROPE
  ASIA
  AMERICA
}

enum GameType {
  BINGO
  SLOT
  SCRATCH
  LOTTERY
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
  ACTIVE
  REGISTERING
  IN_PROGRESS
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

enum LogCategory {
  AUTH
  GAME
  PAYMENT
  SYSTEM
  USER
  SECURITY
  PRIZE
  API
}
