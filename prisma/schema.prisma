generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  password              String
  phone                 String?
  country               String?
  role                  UserRole                @default(USER)
  points                Int                     @default(0)
  balance               Float                   @default(0)
  currency              String?
  costPerPlay           Int?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  emailVerified         DateTime?
  image                 String?
  resetToken            String?                 @unique
  resetTokenExpiry      DateTime?
  affiliateCode         String?                 @unique
  referralCount         Int                     @default(0)
  referralEarnings      Int                     @default(0)
  referredBy            String?
  regionId              String?
  Account               Account[]
  FraudAlert            FraudAlert[]
  GameHistory           GameHistory[]
  Session               Session[]
  TournamentParticipant TournamentParticipant[]
  UserPrize             UserPrize[]
  affiliateTransactions AffiliateTransaction[]
  games                 Game[]
  notifications         Notification[]
  payments              Payment[]
  transactions          Transaction[]
  referrer              User?                   @relation("UserReferrals", fields: [referredBy], references: [affiliateCode])
  referrals             User[]                  @relation("UserReferrals")
  region                RegionModel?           @relation(fields: [regionId], references: [id])

  @@map("users")
}

model RegionModel {
  id            String        @id @default(uuid())
  name          String        @unique
  XOFPerPoint   Float         @default(150)
  euroPerPoint  Float         @default(0.5)
  dollarPerPoint Float        @default(1)
  users         User[]
  transactions  Transaction[]
  
  @@map("regions")
}

model Game {
  id           String        @id @default(cuid())
  points       Int          // Points gagnés ou perdus
  createdAt    DateTime     @default(now())
  userId       String
  prizeId      String
  status       GameStatus   @default(PENDING)
  won          Boolean      @default(false)
  cost         Int          // Coût du jeu en points
  user         User         @relation(fields: [userId], references: [id])
  prize        Prize        @relation(fields: [prizeId], references: [id])
  gameHistory  GameHistory[]

  @@map("games")
}

model GameHistory {
  id        String   @id @default(cuid())
  gameId    String
  userId    String
  prizeId   String
  won       Boolean
  cost      Int      // Coût du jeu
  points    Int      // Points gagnés ou perdus
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  prize     Prize    @relation(fields: [prizeId], references: [id])

  @@map("game_history")
}

model GamePrize {
  id        String   @id @default(cuid())
  gameId    String
  prizeId   String
  createdAt DateTime @default(now())
  prize     Prize    @relation(fields: [prizeId], references: [id])

  @@map("game_prizes")
}

model Prize {
  id          String     @id @default(cuid())
  name        String
  description String?
  category    Category   // FOOD, CLOTHING, SUPER
  pointValue  Int        // Valeur en points du prix
  imageUrl    String?
  isActive    Boolean    @default(true)
  stock       Int        @default(0)
  region      Region     @default(BLACK_AFRICA) // Région du prix
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  winners     UserPrize[]
  tournaments Tournament[]
  gamePrizes  GamePrize[]
  games       Game[]         // Relation avec Game
  gameHistory GameHistory[]  // Relation avec GameHistory

  @@map("prizes")
}

model Tournament {
  id                    String                  @id
  name                  String
  description           String
  entryFee             Int
  startTime            DateTime
  endTime              DateTime
  minPlayers           Int
  maxPlayers           Int
  status               TournamentStatus
  prizes               Json
  createdAt            DateTime                @default(now())
  participants         TournamentParticipant[]
  prize                Prize                   @relation(fields: [prizeId], references: [id])
  prizeId              String

  @@map("tournaments")
}

model TournamentParticipant {
  id           String     @id
  tournamentId String
  userId       String
  score        Int        @default(0)
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}

model UserPrize {
  id        String   @id
  userId    String
  prizeId   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prize     Prize    @relation(fields: [prizeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_prizes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum PaymentProvider {
  PAYPAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

model Payment {
  id                String          @id @default(cuid())
  userId            String
  amount            Float
  currency          String
  status            PaymentStatus    @default(PENDING)
  type              String
  provider          PaymentProvider
  reference         String?         // ID de transaction externe (PayPal, etc.)
  transactionId     String?         // ID de transaction externe (PayPal, etc.)
  metadata          Json?           // Données supplémentaires spécifiques au provider
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  processedAt       DateTime?
  user              User            @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Transaction {
  id          String    @id @default(cuid())
  userId      String
  type        String
  points      Int
  status      String
  amount      Float?
  currency    String?
  regionId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  region      RegionModel? @relation(fields: [regionId], references: [id])

  @@map("transactions")
}

model AffiliateTransaction {
  id        String   @id @default(cuid())
  userId    String
  points    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("affiliate_transactions")
}

model FraudAlert {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("fraud_alerts")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Log {
  id        String      @id @default(cuid())
  level     LogLevel    @default(INFO)
  category  LogCategory
  message   String
  metadata  Json?
  createdAt DateTime    @default(now())

  @@index([category])
  @@index([createdAt])
  @@index([level])
  @@map("logs")
}

enum UserRole {
  USER
  ADMIN
}

enum Category {
  FOOD
  CLOTHING
  SUPER
}

enum Region {
  BLACK_AFRICA
  WHITE_AFRICA
  EUROPE
  ASIA
  AMERICA
}

enum GameStatus {
  PENDING
  PLAYING
  COMPLETED
  CANCELLED
  IN_PROGRESS
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
  ACTIVE
  REGISTERING
  IN_PROGRESS
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

enum LogCategory {
  AUTH
  GAME
  PAYMENT
  SYSTEM
  USER
  SECURITY
  PRIZE
  API
}

model Settings {
  id                String   @id @default(cuid())
  cardsPerGame      Int      @default(2)
  costPerCard       Int      @default(1)
  blackAfricaRate   Float    @default(150)    // Taux de conversion pour l'Afrique noire
  whiteAfricaRate   Float    @default(0.5)    // Taux de conversion pour l'Afrique blanche
  europeRate        Float    @default(0.85)   // Taux de conversion pour l'Europe
  asiaRate          Float    @default(0.75)   // Taux de conversion pour l'Asie
  americaRate       Float    @default(1)      // Taux de conversion pour l'Amérique
  defaultPoints     Int      @default(10)     // Points par défaut pour les nouveaux utilisateurs
  minPointsPerGame  Int      @default(1)      // Nombre minimum de points par partie
  maxPointsPerGame  Int      @default(100)    // Nombre maximum de points par partie
  referralPoints    Int      @default(5)      // Points gagnés pour un parrainage
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("settings")
}
